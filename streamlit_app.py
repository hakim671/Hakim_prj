import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import plotly.graph_objects as go
from prophet import Prophet
from sklearn.metrics import mean_squared_error
from math import sqrt
from statsmodels.tsa.arima.model import ARIMA

st.set_page_config(page_title="üíµ –ü—Ä–æ–≥–Ω–æ–∑–∏–∫ –∫—É—Ä—Å–∞ —Å–æ–º–æ–Ω–∏/–¥–æ–ª–ª–∞—Ä", layout="wide")

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
@st.cache_data
def load_data():
    df = pd.read_csv('USD_TJS Historical Data (1).csv')
    df['Date'] = pd.to_datetime(df['Date'])
    df = df.sort_values('Date')  # —É–±–µ–¥–∏–º—Å—è, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    return df

# –§—É–Ω–∫—Ü–∏—è RMSE
def rmse(y_actual, y_predicted):
    return sqrt(mean_squared_error(y_actual, y_predicted))

# –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
df = load_data()
df_prophet = df[['Date', 'Price']].rename(columns={'Date': 'ds', 'Price': 'y'})

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
forecast_horizon = 120
train_pr = df_prophet.iloc[forecast_horizon:]
val_pr = df_prophet.iloc[:forecast_horizon]

# Prophet –¥–ª—è RMSE
model = Prophet(daily_seasonality=False, yearly_seasonality=False, changepoint_prior_scale=0.001, n_changepoints=7)
model.fit(train_pr)
future = model.make_future_dataframe(periods=forecast_horizon, freq='D', include_history=False)
forecast = model.predict(future)
val_actual = val_pr['y'].values
val_pred = forecast['yhat'].values
model_rmse = rmse(val_actual, val_pred)

# –ë–æ–∫–æ–≤–æ–µ –º–µ–Ω—é
st.sidebar.title("üìå –ú–µ–Ω—é")
page = st.sidebar.radio("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É", ["üìà –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –º–æ–¥–µ–ª–∏", "üîÆ –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ", "üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π"])

# –°—Ç—Ä–∞–Ω–∏—Ü–∞ 1: –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –º–æ–¥–µ–ª–∏
if page == "üìà –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –º–æ–¥–µ–ª–∏":
    st.title("üìà –ü—Ä–æ–≥–Ω–æ–∑ –∫—É—Ä—Å–∞ —Å–æ–º–æ–Ω–∏/–¥–æ–ª–ª–∞—Ä")
    st.markdown("""
    **–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:**  
    –ú–æ–¥–µ–ª—å –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ—Ç –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã **—Å–æ–º–æ–Ω–∏ –∫ –¥–æ–ª–ª–∞—Ä—É –°–®–ê** –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤ —Å –ø–æ–º–æ—â—å—é **Prophet** –∏ **ARIMA**.

    **–î–∞–Ω–Ω—ã–µ:**
    - –ò—Å—Ç–æ—á–Ω–∏–∫: investing.com
    - –û–±—ä–µ–º: 1339 –∑–∞–ø–∏—Å–µ–π
    - –ü–µ—Ä–∏–æ–¥: 2020 ‚Äî 2025

    **–ú–æ–¥–µ–ª—å:**
    - –ú–µ—Ç–æ–¥: Facebook Prophet
    - –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏: –ë–µ–∑ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏, 7 —Ç–æ—á–µ–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞
    - –ú–µ—Ç—Ä–∏–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞: RMSE
    """)
    st.metric(label="üìâ RMSE –Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏", value=f"{model_rmse:.2f} —Å–æ–º–æ–Ω–∏")

    st.subheader("üìä –†–µ–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã")
    fig = go.Figure()
    fig.add_trace(go.Scatter(x=df['Date'], y=df['Price'], mode='lines', name='–¶–µ–Ω–∞'))
    fig.update_layout(title="–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –∫—É—Ä—Å —Å–æ–º–æ–Ω–∏/–¥–æ–ª–ª–∞—Ä", xaxis_title="–î–∞—Ç–∞", yaxis_title="–ö—É—Ä—Å")
    st.plotly_chart(fig, use_container_width=True)

# –°—Ç—Ä–∞–Ω–∏—Ü–∞ 2: –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ
elif page == "üîÆ –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ":
    st.title("üîÆ –ü—Ä–æ–≥–Ω–æ–∑ –∫—É—Ä—Å–∞ —Å–æ–º–æ–Ω–∏/–¥–æ–ª–ª–∞—Ä")
    st.markdown("–ú–æ–¥–µ–ª—å **Prophet** –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç –∫—É—Ä—Å –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 120 –¥–Ω–µ–π.")

    model = Prophet(daily_seasonality=False, yearly_seasonality=False, changepoint_prior_scale=0.001, n_changepoints=7)
    model.fit(df_prophet)
    future = model.make_future_dataframe(periods=forecast_horizon, freq='D', include_history=False)
    forecast = model.predict(future)

    day_selected = st.slider("üìÖ –î–µ–Ω—å –ø—Ä–æ–≥–Ω–æ–∑–∞", min_value=1, max_value=forecast_horizon, value=1)
    if day_selected >= 60:
        st.warning("‚ö†Ô∏è –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω–µ–µ —Ç–æ—á–Ω—ã–º.")

    selected = forecast.iloc[day_selected - 1]
    st.metric(f"–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –¥–µ–Ω—å {day_selected}", f"{selected['yhat']:.4f} —Å–æ–º–æ–Ω–∏")
    st.caption(f"–î–∏–∞–ø–∞–∑–æ–Ω –æ—Ç {selected['yhat_lower']:.4f} –¥–æ {selected['yhat_upper']:.4f}")

    st.subheader("üìà –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥–Ω–æ–∑–∞")
    fig2 = model.plot(forecast)
    st.pyplot(fig2)

    st.subheader("üìã –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞")
    st.dataframe(forecast[['ds', 'yhat', 'yhat_lower', 'yhat_upper']].rename(columns={
        'ds': '–î–∞—Ç–∞',
        'yhat': '–ü—Ä–æ–≥–Ω–æ–∑',
        'yhat_lower': '–ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞',
        'yhat_upper': '–í–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞'
    }))

# –°—Ç—Ä–∞–Ω–∏—Ü–∞ 3: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π
elif page == "üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π":
    st.title("üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π: Prophet vs ARIMA")

    df.set_index('Date', inplace=True)
    prophet_model = Prophet(daily_seasonality=False, yearly_seasonality=False,
                            changepoint_prior_scale=0.001, n_changepoints=7)
    prophet_model.fit(df_prophet)
    future = prophet_model.make_future_dataframe(periods=forecast_horizon, freq='D', include_history=False)
    forecast = prophet_model.predict(future)

    # –ü—Ä–æ–≥–Ω–æ–∑ ARIMA
    arima_model = ARIMA(df['Price'], order=(8, 0, 9))
    arima_result = arima_model.fit()
    forecast_ar = arima_result.forecast(steps=forecast_horizon)
    last_date = df.index[-1]
    future_dates = pd.date_range(start=last_date + pd.Timedelta(days=1), periods=forecast_horizon)
    forecast_arima = pd.Series(forecast_ar, index=future_dates)

    day_selected = st.slider("üìÖ –î–µ–Ω—å –ø—Ä–æ–≥–Ω–æ–∑–∞", min_value=1, max_value=forecast_horizon, value=1)
    selected_forecast = forecast.iloc[day_selected - 1]['yhat']
    selected_pred = forecast_arima.iloc[day_selected - 1]

    st.subheader(f"üìå –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –¥–µ–Ω—å {day_selected}")
    col1, col2 = st.columns(2)
    with col1:
        st.metric("Prophet", f"{round(selected_forecast, 2)} —Å–æ–º–æ–Ω–∏")
    with col2:
        st.metric("ARIMA", f"{round(selected_pred, 2)} —Å–æ–º–æ–Ω–∏")

    st.subheader("üìâ –ì—Ä–∞—Ñ–∏–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
    fig = go.Figure()
    fig.add_trace(go.Scatter(x=forecast['ds'], y=forecast['yhat'], name='Prophet', line=dict(color='royalblue')))
    fig.add_trace(go.Scatter(x=future_dates, y=forecast_arima, name='ARIMA', line=dict(color='darkorange')))
    fig.update_layout(title="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ Prophet –∏ ARIMA", xaxis_title="–î–∞—Ç–∞", yaxis_title="–ö—É—Ä—Å")
    st.plotly_chart(fig, use_container_width=True)
